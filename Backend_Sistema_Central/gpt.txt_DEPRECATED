üóÇÔ∏è Procesando carpeta: Controllers
===== AuthController.cs =====
using Backend_Sistema_Central.DTOs;
using Backend_Sistema_Central.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace Backend_Sistema_Central.Controllers;

[ApiController]
[Route("api/[controller]")]
public class AuthController(ApplicationDbContext db) : ControllerBase
{
    [HttpPost("login")]
    public async Task<IActionResult> Login([FromBody] LoginDto dto)
    {
        var cert = HttpContext.Connection.ClientCertificate;
        if (cert is null) return Unauthorized("Certificado requerido");

        var usb = await db.DispositivosUSB.Include(u => u.Usuario)
                      .FirstOrDefaultAsync(u => u.CertThumbprint == cert.Thumbprint);
        if (usb is null) return Unauthorized("USB no registrado");

        if (!BCrypt.Net.BCrypt.Verify(dto.Pin, usb.Usuario.PinHash))
            return Unauthorized("PIN incorrecto");

        db.Logs.Add(new LogActividad
        {
            UsuarioId = usb.UsuarioId,
            TipoEvento = "LoginOK",
            IP = HttpContext.Connection.RemoteIpAddress?.ToString() ?? "",
            MAC = dto.MacAddress,
            FechaHora = DateTime.UtcNow
        });
        await db.SaveChangesAsync();

        return Ok("Login exitoso");
    }
}



===== LogsController.cs =====
using Backend_Sistema_Central.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace Backend_Sistema_Central.Controllers;

[ApiController]
[Route("api/[controller]")]
public class LogsController(ApplicationDbContext db) : ControllerBase
{
    [HttpGet]
    public async Task<IEnumerable<LogActividad>> Get(int page = 1, int pageSize = 50) =>
        await db.Logs.OrderByDescending(l => l.FechaHora)
                     .Skip((page - 1) * pageSize)
                     .Take(pageSize)
                     .ToListAsync();
}



===== UsbController.cs =====
using Backend_Sistema_Central.Models;
using Microsoft.AspNetCore.Mvc;

namespace Backend_Sistema_Central.Controllers;

[ApiController]
[Route("api/[controller]")]
public class UsbController(ApplicationDbContext db) : ControllerBase
{
    public record AsignarDto(string Serial, string CertThumbprint, int UsuarioId);

    [HttpPost("asignar")]
    public async Task<IActionResult> Asignar(AsignarDto dto)
    {
        if (db.DispositivosUSB.Any(u => u.Serial == dto.Serial))
            return Conflict("USB ya asignado");

        db.DispositivosUSB.Add(new DispositivoUSB
        {
            Serial = dto.Serial,
            CertThumbprint = dto.CertThumbprint,
            FechaAsignacion = DateTime.UtcNow,
            UsuarioId = dto.UsuarioId
        });
        await db.SaveChangesAsync();
        return Ok("USB asignado");
    }
}



===== UsuariosController.cs =====
using Backend_Sistema_Central.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace Backend_Sistema_Central.Controllers;

[ApiController]
[Route("api/[controller]")]
public class UsuariosController(ApplicationDbContext db) : ControllerBase
{
    [HttpPost]
    public async Task<IActionResult> Crear(Usuario u)
    {
        u.PinHash = BCrypt.Net.BCrypt.HashPassword(u.PinHash);
        db.Usuarios.Add(u);
        await db.SaveChangesAsync();
        return CreatedAtAction(nameof(Get), new { id = u.Id }, u);
    }

    [HttpGet("{id:int}")]
    public async Task<ActionResult<Usuario>> Get(int id)
    {
        var usuario = await db.Usuarios.Include(u => u.USBs).FirstOrDefaultAsync(u => u.Id == id);
        return usuario is null ? NotFound() : usuario;
    }
}



===== WeatherForecastController.cs =====
using Microsoft.AspNetCore.Mvc;

namespace Backend_Sistema_Central.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class WeatherForecastController : ControllerBase
    {
        private static readonly string[] Summaries = new[]
        {
            "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };

        private readonly ILogger<WeatherForecastController> _logger;

        public WeatherForecastController(ILogger<WeatherForecastController> logger)
        {
            _logger = logger;
        }

        [HttpGet(Name = "GetWeatherForecast")]
        public IEnumerable<WeatherForecast> Get()
        {
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = Summaries[Random.Shared.Next(Summaries.Length)]
            })
            .ToArray();
        }
    }
}



üóÇÔ∏è Procesando carpeta: Models
===== DispositivoUSB.cs =====
namespace Backend_Sistema_Central.Models;

public class DispositivoUSB
{
    public int Id { get; set; }
    public string Serial { get; set; } = default!;
    public string CertThumbprint { get; set; } = default!;
    public DateTime FechaAsignacion { get; set; }
    public int UsuarioId { get; set; }
    public Usuario Usuario { get; set; } = default!;
}



===== LogActividad.cs =====
namespace Backend_Sistema_Central.Models;

public class LogActividad
{
    public int Id { get; set; }
    public int UsuarioId { get; set; }
    public string TipoEvento { get; set; } = default!;
    public string IP { get; set; } = default!;
    public string MAC { get; set; } = default!;
    public DateTime FechaHora { get; set; }
    public string? Detalle { get; set; }
}



===== Usuario.cs =====
namespace Backend_Sistema_Central.Models;

public class Usuario
{
    public int Id { get; set; }
    public string Rut { get; set; } = default!;
    public string Nombre { get; set; } = default!;
    public string PinHash { get; set; } = default!;
    public ICollection<DispositivoUSB> USBs { get; set; } = [];
}



